# Update all versions in this file by running:
#   $ pre-commit autoupdate
minimum_pre_commit_version: 2.20.0
default_language_version:
  python: python3.10
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.3.0
    hooks:
      # list of definitions and supported hooks: https://pre-commit.com/hooks.html
      - id: end-of-file-fixer
        name: Check for a blank line at the end of scripts (auto-fixes)
      - id: trailing-whitespace # removes any whitespace at the ends of lines
      - id: check-builtin-literals
      - id: check-byte-order-marker
      - id: check-case-conflict
      - id: check-merge-conflict # check for files with merge conflict strings
        args: ["--assume-in-merge"] #  and run this check even when not explicitly in a merge
      - id: check-symlinks
      - id: check-toml # check toml syntax by loading all toml files
      - id: check-vcs-permalinks
      - id: check-xml
      - id: debug-statements # check for python debug statements (import pdb, breakpoint, etc.)
      - id: detect-private-key # checks for private keys (BEGIN X PRIVATE KEY, etc.)
      - id: mixed-line-ending
      - id: fix-encoding-pragma
        args: ["--remove"]
      - id: check-yaml # check yaml syntax by loading all yaml files
      - id: check-json # check-json syntax by loading all json files
        exclude: ^.vscode/settings.json
      - id: check-added-large-files # check that no "large" files have been added
        name: Check for files larger than 10 MB
        args: ["--maxkb=10240"] #  where large means 10MB+, as in Hugging Face's git server
      - id: check-ast
      - id: check-docstring-first
  - repo: https://github.com/myint/autoflake
    rev: v1.5.3
    hooks:
      - id: autoflake
        args: &autoflake
          - --in-place
          - --remove-all-unused-imports
          - --expand-star-imports
          - --remove-duplicate-keys
          - --remove-unused-variables
        exclude: __init__.py
  - repo: https://gitlab.com/pycqa/flake8
    rev: 3.9.2
    hooks:
      - &flake8
        id: flake8
        # exclude: (labs)
        additional_dependencies:
          - flake8-annotations
          - flake8-bandit
          - flake8-bugbear
          - flake8-docstrings==1.6.0
          - flake8-eradicate==1.3.0
          - flake8-fixme==1.1.1
          - flake8-implicit-str-concat==0.3.0
          - flake8-import-order
          - flake8-no-pep420==2.3.0
          # - flake8-print==5.0.0
          - flake8-return==1.1.3
          - darglint
          - mypy
          - pycodestyle
          - pydocstyle
        # additional configuration of flake8 and extensions in setup.cfg
        args: ["--config=setup.cfg"]
  - repo: https://github.com/psf/black
    rev: 22.8.0
    hooks:
      - id: black
  - repo: https://github.com/asottile/add-trailing-comma
    rev: v2.2.3
    hooks:
      - id: add-trailing-comma
        args: [--py36-plus]
  - repo: https://github.com/timothycrosley/isort
    rev: 5.10.1
    hooks:
      - id: isort
        types: [python]
  - repo: https://github.com/asottile/pyupgrade
    rev: v2.37.3
    hooks:
      - id: pyupgrade
        args:
          - "--py37-plus"
  # shellcheck-py for linting shell files
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.8.0.4
    hooks:
      - id: shellcheck
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.3.0
    hooks:
      - id: detect-secrets
        name: detect-secrets - Detect secrets in staged code
        args: [
            "--baseline",
            ".secrets.baseline",
            # https://regex101.com/
            "--exclude-files 'poetry\\.lock'",
            "--exclude-files '\\.secrets\\.baseline'",
            "--exclude-files '\\.env\\.template'",
            "--exclude-files '.*\\.ipynb$'",
            # "--exclude-files '.*build/'",
            "--exclude-secrets 'password|ENTER_PASSWORD_HERE|INSERT_API_KEY_HERE'",
            "--exclude-lines 'integrity=*sha'",
          ]
        # https://pre-commit.com/#regular-expressions
        exclude: |
          (?x)^(
              poetry\.lock|
              \.secrets\.baseline|
              \.env\.template
          )$
  # - repo: https://github.com/python-poetry/poetry
  #   rev: 1.2.1
  #   hooks:
  #     - id: poetry-check
  #     - id: poetry-lock
  #       args: ["--no-update"]
  #     - id: poetry-export
  #       args:
  #         [
  #           "-f",
  #           "requirements.txt",
  #           "-o",
  #           "requirements.txt",
  #           "--without-hashes",
  #         ]
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0-alpha.0
    hooks:
      - id: prettier
        types_or: [yaml]
        additional_dependencies:
          - "prettier@2.7.1"
  - repo: local
    hooks:
      # - id: pylint
      #   name: pylint
      #   entry: pylint labs
      #   # entry: bash -c 'pylint ./path/package1/; pylint ./path/package2/'
      #   language: system
      #   types: [python]
      #   always_run: true
      #   pass_filenames: false
      #   stages: [manual]
      - id: pip-audit
        name: pip-audit
        entry: pip-audit
        language: system
        always_run: true
        pass_filenames: false
        stages: [manual]
      # TODO: Remove once this is resolved
      # https://github.com/python-poetry/poetry/issues/2765
      - id: poetry-lock
        name: poetry-lock
        entry: bash -c 'poetry lock && python add_markers.py'
        language: system
        always_run: true
        pass_filenames: false
      - id: poetry-export
        name: poetry-export
        entry: poetry export -f requirements.txt --output requirements.txt --without-hashes
        language: system
        always_run: true
        pass_filenames: false
